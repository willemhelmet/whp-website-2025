/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ../../../ASSETS/rc-logo/RC_Logo.glb --transform 
Files: ../../../ASSETS/rc-logo/RC_Logo.glb [25.9KB] > /Users/whp/Documents/HTML/WHP_WEBSITE_2025_ROOT/whp-website-2025/public/models/RC_Logo-transformed.glb [3.96KB] (85%)
*/
import { Sphere, useGLTF } from "@react-three/drei";
import gsap from "gsap";
import { useGSAP } from "@gsap/react";
import { useState, useRef } from "react";

export function RCLogo(props) {
  const [isHovered, setIsHovered] = useState(false);
  const [isClicked, setIsClicked] = useState(false);
  const ref = useRef();

  useGSAP(() => {
    if (isHovered) {
      gsap.to(ref.current.scale, {
        x: 0.3,
        y: 0.3,
        z: 0.3,
        duration: 0.1,
        ease: "back.out(1.7)",
      });
    } else {
      gsap.to(ref.current.scale, {
        x: 0.25,
        y: 0.25,
        z: 0.25,
        duration: 0.1,
        ease: "back.out(1.7)",
      });
    }
  }, [isHovered]);

  useGSAP(() => {
    if (isClicked) {
      gsap.to(ref.current.scale, {
        x: 0.25,
        y: 0.25,
        z: 0.25,
        duration: 0.1,
        ease: "back.out(1.7)",
      });
    } else {
      gsap.to(ref.current.scale, {
        x: 0.3,
        y: 0.3,
        z: 0.3,
        duration: 0.1,
        ease: "back.out(1.7)",
      });
    }
  }, [isClicked]);

  const { nodes, materials } = useGLTF(
    "/public/models/RC_Logo-transformed.glb"
  );

  return (
    <group {...props} scale={[0.25, 0.25, 0.25]} ref={ref}>
      <mesh geometry={nodes.Keys.geometry} material={materials.WHITE} />
      <mesh geometry={nodes.ScreenType.geometry} material={materials.GREEN} />
      <mesh geometry={nodes.MonitorBody.geometry} material={materials.BLACK} />
      <Sphere
        args={[2.25, 12, 12]}
        position={[0, 1.5, 0]}
        onPointerEnter={() => setIsHovered(true)}
        onPointerLeave={() => setIsHovered(false)}
        onPointerDown={() => setIsClicked(true)}
        onPointerUp={() => setIsClicked(false)}
      >
        <meshBasicMaterial transparent opacity={0} />
      </Sphere>
    </group>
  );
}

useGLTF.preload("/RC_Logo-transformed.glb");
